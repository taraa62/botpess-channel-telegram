{"version":3,"sources":["Bot.ts"],"names":["Bot","constructor","bp","Map","receive","ClientReceive","replyTo","ReplyToClient","setupMiddleware","events","registerMiddleware","description","direction","handler","outgoingHandler","bind","name","order","init","config","botId","_config","bot","Telegraf","botToken","clients","set","setupBot","client","getBot","start","ctx","sendEvent","type","help","on","ClientEvent","MESSAGE","CALLBACK_QUERY","get","removeBot","stop","delete"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEO,MAAMA,GAAN,CAAU;AAQfC,EAAAA,WAAW,CAASC,EAAT,EAAyB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,qCAF2B,IAAIC,GAAJ,EAE3B;;AAClC,SAAKC,OAAL,GAAe,IAAIC,4BAAJ,CAAkBH,EAAlB,CAAf;AACA,SAAKI,OAAL,GAAe,IAAIC,4BAAJ,CAAkBL,EAAlB,EAAsB,IAAtB,CAAf;AACA,SAAKM,eAAL;AACD;;AAEMA,EAAAA,eAAP,GAAyB;AACvB,SAAKN,EAAL,CAAQO,MAAR,CAAeC,kBAAf,CAAkC;AAChCC,MAAAA,WAAW,EACT,yDACA,+EAH8B;AAIhCC,MAAAA,SAAS,EAAE,UAJqB;AAKhCC,MAAAA,OAAO,EAAE,KAAKP,OAAL,CAAaQ,eAAb,CAA6BC,IAA7B,CAAkC,KAAKT,OAAvC,CALuB;AAMhCU,MAAAA,IAAI,EAAE,uBAN0B;AAOhCC,MAAAA,KAAK,EAAE;AAPyB,KAAlC;AASD;;AAED,QAAaC,IAAb,CAAkBC,MAAlB,EAAkCC,KAAlC,EAA0F;AACxF,SAAKC,OAAL,GAAeF,MAAf;AACA,SAAKb,OAAL,CAAaY,IAAb,CAAkBC,MAAlB;AACA,UAAMG,GAAG,GAAG,IAAIC,iBAAJ,CAAaJ,MAAM,CAACK,QAApB,CAAZ;AACA,SAAKC,OAAL,CAAaC,GAAb,CAAiBN,KAAjB,EAAwBE,GAAxB;AAEA,WAAOA,GAAP;AACD;;AAED,QAAaK,QAAb,CAAsBP,KAAtB,EAAqC;AACnC,UAAMQ,MAAM,GAAG,KAAKC,MAAL,CAAYT,KAAZ,CAAf;AAEAQ,IAAAA,MAAM,CAACE,KAAP,CAAaC,GAAG,IAAI,KAAK3B,OAAL,CAAa4B,SAAb,CAAuB;AAAEZ,MAAAA,KAAF;AAASW,MAAAA,GAAT;AAAcE,MAAAA,IAAI,EAAE;AAApB,KAAvB,CAApB;AACAL,IAAAA,MAAM,CAACM,IAAP,CAAYH,GAAG,IAAI,KAAK3B,OAAL,CAAa4B,SAAb,CAAuB;AAAEZ,MAAAA,KAAF;AAASW,MAAAA,GAAT;AAAcE,MAAAA,IAAI,EAAE;AAApB,KAAvB,CAAnB;AACAL,IAAAA,MAAM,CAACO,EAAP,CAAUC,qBAAYC,OAAtB,EAA+BN,GAAG,IAAI,KAAK3B,OAAL,CAAa4B,SAAb,CAAuB;AAC3DZ,MAAAA,KAD2D;AAE3DW,MAAAA,GAF2D;AAG3DE,MAAAA,IAAI,EAAEG,qBAAYC;AAHyC,KAAvB,CAAtC;AAKAT,IAAAA,MAAM,CAACO,EAAP,CAAUC,qBAAYE,cAAtB,EAAsCP,GAAG,IAAI,KAAK3B,OAAL,CAAa4B,SAAb,CAAuB;AAClEZ,MAAAA,KADkE;AAElEW,MAAAA,GAFkE;AAGlEE,MAAAA,IAAI,EAAEG,qBAAYE;AAHgD,KAAvB,CAA7C,EAVmC,CAenC;AACD;;AAGMT,EAAAA,MAAP,CAAcT,KAAd,EAA6D;AAC3D,WAAO,KAAKK,OAAL,CAAac,GAAb,CAAiBnB,KAAjB,CAAP;AACD;;AAED,QAAaoB,SAAb,CAAuBpB,KAAvB,EAAoD;AAClD,UAAME,GAAG,GAAG,KAAKG,OAAL,CAAac,GAAb,CAAiBnB,KAAjB,CAAZ;;AACA,QAAIE,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACmB,IAAJ;AACD;;AACD,SAAKhB,OAAL,CAAaiB,MAAb,CAAoBtB,KAApB;AACD,GAhEc,CAkEf;;;AACA,MAAWD,MAAX,GAA0B;AACxB,WAAO,KAAKE,OAAZ;AACD;;AArEc","sourceRoot":"/home/taras/Документы/svn/botpress_12.1.0/modules/channel-telegram-t62/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport Telegraf, { ContextMessageUpdate } from 'telegraf'\nimport { Config } from '../config'\nimport { ClientReceive } from './ClientReceive'\nimport { ReplyToClient } from './ReplyToClient'\nimport { ClientEvent } from './typings'\n\nexport class Bot {\n\n  private _config: Config\n  private receive: ClientReceive\n  private replyTo: ReplyToClient\n\n  private clients: Map<string, Telegraf<ContextMessageUpdate>> = new Map<string, Telegraf<ContextMessageUpdate>>()\n\n  constructor(private bp: typeof sdk) {\n    this.receive = new ClientReceive(bp)\n    this.replyTo = new ReplyToClient(bp, this)\n    this.setupMiddleware()\n  }\n\n  public setupMiddleware() {\n    this.bp.events.registerMiddleware({\n      description:\n        'Sends out messages that targets platform = telegram.' +\n        ' This middleware should be placed at the end as it swallows events once sent.',\n      direction: 'outgoing',\n      handler: this.replyTo.outgoingHandler.bind(this.replyTo),\n      name: 'telegram.sendMessages',\n      order: 100\n    })\n  }\n\n  public async init(config: Config, botId: string): Promise<Telegraf<ContextMessageUpdate>> {\n    this._config = config\n    this.replyTo.init(config);\n    const bot = new Telegraf(config.botToken)\n    this.clients.set(botId, bot)\n\n    return bot\n  }\n\n  public async setupBot(botId: string) {\n    const client = this.getBot(botId)\n\n    client.start(ctx => this.receive.sendEvent({ botId, ctx, type: 'start' }))\n    client.help(ctx => this.receive.sendEvent({ botId, ctx, type: 'help' }))\n    client.on(ClientEvent.MESSAGE, ctx => this.receive.sendEvent({\n      botId,\n      ctx,\n      type: ClientEvent.MESSAGE\n    }))\n    client.on(ClientEvent.CALLBACK_QUERY, ctx => this.receive.sendEvent({\n      botId,\n      ctx,\n      type: ClientEvent.CALLBACK_QUERY\n    }))\n    // TODO We don't support understanding and accepting more complex stuff from users such as files, audio etc\n  }\n\n\n  public getBot(botId: string): Telegraf<ContextMessageUpdate> {\n    return this.clients.get(botId)\n  }\n\n  public async removeBot(botId: string): Promise<any> {\n    const bot = this.clients.get(botId)\n    if (bot) {\n      bot.stop()\n    }\n    this.clients.delete(botId)\n  }\n\n  // @ts-ignore\n  public get config():Config{\n    return this._config\n  }\n}\n"]}