{"version":3,"sources":["ReplyFromSettings.ts"],"names":["ReplyFromSettings","constructor","bp","parent","replyDefMethods","updateDefSettings","conf","defaultSettings","def","parser","buttonType","Object","assign","reply","event","ctx","chatId","buttons","edit","msg","tBtn","settings","payload","t62Settings","telegram","getButtons","parse_mode","type","text","elements","quick_replies","preview","reply_markup","one_time_keyboard","resize_keyboard","remove_keyboard","dataBtn","sendMessage","sett","getCallBackBtn","title","callback","hide","Markup","callbackButton","getUrlBtn","url","urlButton","res","map","v","push","checkGroupBtn","inlineKeyboard","keyboard","temp","Map","i","length","b","key","callback_data","indexOf","gr","split","arr","get","set","Array","from","forEach"],"mappings":"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","sourceRoot":"/home/taraa62/svn/botpress12_1_0/modules/channel-telegram-t62/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport Telegraf, { ContextMessageUpdate, Markup } from 'telegraf'\nimport { ExtraEditMessage } from 'telegraf/typings/telegram-types'\nimport { IDefSettingTelegram } from '../config'\nimport { ReplyDefMethods } from './ReplyDefMethods'\nimport { ReplyToClient } from './ReplyToClient'\nimport { ITelButtons, ITelegramSettings } from './typings'\n\nexport class ReplyFromSettings {\n\n  public defaultSettings: IDefSettingTelegram\n\n  constructor(private bp: typeof sdk, private parent: ReplyToClient, private replyDefMethods: ReplyDefMethods) {\n\n  }\n\n  public updateDefSettings(conf: IDefSettingTelegram): void {\n    this.defaultSettings = conf\n\n    const def: IDefSettingTelegram = {\n      parser: 'HTML',\n      buttonType: 'keyboard'\n    }\n    this.defaultSettings = Object.assign(def, this.defaultSettings)\n  }\n\n  public async reply(event: sdk.IO.Event, ctx: Telegraf<ContextMessageUpdate>, chatId: string): Promise<any> {\n\n    let buttons, edit: ExtraEditMessage, msg, tBtn\n\n    let settings: ITelegramSettings = event.payload.t62Settings ? event.payload.t62Settings.telegram : null\n    if (settings) {\n      settings = Object.assign(settings, this.defaultSettings)\n      buttons = this.getButtons(settings.buttons)\n      edit = {\n        parse_mode: settings.parser || 'HTML'\n      }\n      tBtn = (!buttons) ? tBtn : (settings.buttons.type !== 'keyboard') ? 'inline_keyboard' : 'keyboard'\n      msg = settings.text\n    } else if (this.defaultSettings) {\n      buttons = this.getButtons({\n        type: this.defaultSettings.buttonType,\n        buttons: event.payload.elements || event.payload.quick_replies\n      })\n      edit = {\n        parse_mode: this.defaultSettings.parser\n        /*reply_markup:{\n\n        }*/\n      }\n      msg = event.payload.text || event.preview || ''\n      tBtn = (!buttons) ? tBtn : (this.defaultSettings.buttonType !== 'keyboard') ? 'inline_keyboard' : 'keyboard'\n    }\n\n    (edit as any).reply_markup = {\n      one_time_keyboard: true,\n      resize_keyboard: true,\n      remove_keyboard: !buttons ? true : false\n    }\n    if (buttons && tBtn) {\n      (edit as any).reply_markup = buttons\n    }\n    (ctx as any).dataBtn = buttons\n    await ctx.telegram.sendMessage(chatId, msg, edit)\n\n  }\n\n  private getButtons(sett: ITelButtons) {\n    const getCallBackBtn = (title: string, callback: string, hide: boolean = false) => {\n      return Markup.callbackButton(title, callback, hide)\n    }\n    const getUrlBtn = (title: string, url: string, hide: boolean = false) => {\n      return Markup.urlButton(title, url, hide)\n    }\n    let res: any[] = null\n    if (sett && sett.buttons) {\n      res = []\n      sett.buttons.map(v => {\n        (v.url) ? res.push(getUrlBtn(v.title, v.url || v.payload, !!v.hide)) : res.push(getCallBackBtn(v.title, v.callback || v.payload, !!v.hide))\n      })\n      res = this.checkGroupBtn(res)\n      if (sett.type !== 'keyboard') {\n        return Markup.inlineKeyboard(res)\n      } else {\n        return Markup.keyboard(res)\n      }\n    }\n    return res\n  }\n\n  private checkGroupBtn(buttons: any[]): any[] {\n    const temp = new Map()\n\n    for (let i = 0; i < buttons.length; i++) {\n      const b = buttons[i]\n      const key = b.payload || b.callback_data || b.title\n      if (key.indexOf('_GR') > -1) {\n        const gr = key.split('_GR')[1]\n        if (gr) {\n          const arr = temp.get(gr) ? temp.get(gr) : []\n          arr.push(b)\n          temp.set(gr, arr)\n        }\n      } else {\n        temp.set(key, [b])\n        // temp[key] = b\n      }\n    }\n\n    const res = []\n      Array.from(temp).forEach(v => res.push(v[1]))\n    return res\n\n  }\n}\n"]}