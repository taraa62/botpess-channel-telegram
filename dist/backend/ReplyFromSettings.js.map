{"version":3,"sources":["ReplyFromSettings.ts"],"names":["ReplyFromSettings","constructor","bp","parent","replyDefMethods","updateDefSettings","conf","defaultSettings","def","parser","buttonType","Object","assign","reply","eventType","event","ctx","chatId","sendCarousel","buttons","edit","tBtn","msg","payload","text","settings","t62Settings","telegram","getButtons","parse_mode","type","defBtn","getButtonDef","elements","quick_replies","eBtn","reply_markup","one_time_keyboard","resize_keyboard","remove_keyboard","sendMessage","butt","elem","img","picture","indexOf","title","subtitle","disable_web_page_preview","send_carousel","sett","getCallBackBtn","callback","hide","Markup","callbackButton","getUrlBtn","url","urlButton","res","map","v","push","checkGroupBtn","inlineKeyboard","keyboard","temp","Map","i","length","b","key","callback_data","toLocaleUpperCase","gr","split","arr","get","set","Array","from","forEach"],"mappings":"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","sourceRoot":"/home/taras/Документы/svn/botpress_12.1.0/modules/channel-telegram-t62/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport Telegraf, { ContextMessageUpdate, Markup } from 'telegraf'\nimport { ExtraEditMessage } from 'telegraf/typings/telegram-types'\nimport { IDefSettingTelegram } from '../config'\nimport { ReplyDefMethods } from './ReplyDefMethods'\nimport { ReplyToClient } from './ReplyToClient'\nimport { ITelButtons, ITelegramSettings } from './typings'\n\nexport class ReplyFromSettings {\n\n  public defaultSettings: IDefSettingTelegram\n\n  constructor(private bp: typeof sdk, private parent: ReplyToClient, private replyDefMethods: ReplyDefMethods) {\n\n  }\n\n  public updateDefSettings(conf: IDefSettingTelegram): void {\n    this.defaultSettings = conf\n\n    const def: IDefSettingTelegram = {\n      parser: 'HTML',\n      buttonType: 'keyboard'\n    }\n    this.defaultSettings = Object.assign(def, this.defaultSettings)\n  }\n\n  public async reply(eventType: String, event: sdk.IO.Event, ctx: Telegraf<ContextMessageUpdate>, chatId: string): Promise<any> {\n    if (eventType === 'carousel' || eventType === 'card') {\n      return this.sendCarousel(event, ctx, chatId)\n    }\n\n    if (eventType !== 'text') return false\n    let buttons, edit: ExtraEditMessage, tBtn\n    let msg = event.payload.text\n    let settings: ITelegramSettings = event.payload.t62Settings ? event.payload.t62Settings.telegram : null\n    if (settings) {\n      settings = Object.assign(settings, this.defaultSettings)\n      buttons = this.getButtons(settings.buttons)\n      edit = {\n        parse_mode: settings.parser || 'HTML'\n      }\n      tBtn = (!buttons) ? tBtn : (settings.buttons.type !== 'keyboard') ? 'inline_keyboard' : 'keyboard'\n    } else if (this.defaultSettings) {\n      /*  buttons = this.getButtons({\n          type: this.defaultSettings.buttonType,\n          buttons: event.payload.elements || event.payload.quick_replies\n        })\n        edit = {\n          parse_mode: this.defaultSettings.parse          /*reply_markup:{\n          }\n        }\n        tBtn = (!buttons) ? tBtn : (this.defaultSettings.buttonType !== 'keyboard') ? 'inline_keyboard' : 'keyboard'\n          */\n      const defBtn = this.getButtonDef(event.payload.elements || event.payload.quick_replies)\n      buttons = defBtn.buttons\n      edit = defBtn.edit\n      tBtn = defBtn.eBtn\n    }\n\n    (edit as any).reply_markup = {\n      one_time_keyboard: true,\n      resize_keyboard: true,\n      remove_keyboard: !buttons ? true : false\n    }\n    if (buttons && tBtn) {\n      (edit as any).reply_markup = buttons\n    }\n    return await ctx.telegram.sendMessage(chatId, msg, edit)\n\n  }\n\n  private getButtonDef(butt: any[]): any {\n    let edit: ExtraEditMessage, tBtn\n    const buttons = this.getButtons({\n      type: this.defaultSettings.buttonType,\n      buttons: butt\n    })\n    edit = {\n      parse_mode:  this.defaultSettings.parser\n      /*reply_markup:{\n      }*/\n    }\n    tBtn = (!buttons) ? tBtn : (this.defaultSettings.buttonType !== 'keyboard') ? 'inline_keyboard' : 'keyboard'\n    return { buttons, edit, tBtn }\n  }\n\n\n  private async sendCarousel(event: sdk.IO.Event, ctx: Telegraf<ContextMessageUpdate>, chatId: string): Promise<any> {\n    if (this.defaultSettings) {\n      const elem = event.payload.elements[0]\n      const { buttons, edit, tBtn } = this.getButtonDef(elem.buttons)\n\n      const img = (elem.picture.indexOf(\"localhost\")>-1)?\"The picture from localhost is not displayed in the telegram\":\"Photo\";\n      const msg =\n        `${elem.title}\n         ${elem.subtitle}\n        <a href='${elem.picture}'>${img}</a>\n       `;\n      (edit as any).reply_markup = {\n        disable_web_page_preview:true,\n        one_time_keyboard: true,\n        resize_keyboard: true,\n        remove_keyboard: !buttons ? true : false\n      }\n      if (buttons && tBtn) {\n        (edit as any).reply_markup = buttons\n      }\n\n      await ctx.telegram.sendMessage(chatId, msg, edit)\n      return true\n    } else {\n      return this.replyDefMethods.send_carousel(event, ctx, chatId)\n    }\n  }\n\n  private getButtons(sett: ITelButtons) {\n    const getCallBackBtn = (title: string, callback: string, hide: boolean = false) => {\n      return Markup.callbackButton(title, callback, hide)\n    }\n    const getUrlBtn = (title: string, url: string, hide: boolean = false) => {\n      return Markup.urlButton(title, url, hide)\n    }\n    let res: any[] = null\n    if (sett && sett.buttons) {\n      res = []\n      sett.buttons.map(v => {\n        (v.url) ? res.push(getUrlBtn(v.title, v.url || v.payload, !!v.hide)) : res.push(getCallBackBtn(v.title, v.callback || v.payload, !!v.hide))\n      })\n      res = this.checkGroupBtn(res)\n      if (sett.type !== 'keyboard') {\n        return Markup.inlineKeyboard(res)\n      } else {\n        return Markup.keyboard(res)\n      }\n    }\n    return res\n  }\n\n  private checkGroupBtn(buttons: any[]): any[] {\n    const temp = new Map()\n\n    for (let i = 0; i < buttons.length; i++) {\n      const b = buttons[i]\n      const key = (b.payload || b.callback_data || b.title).toLocaleUpperCase()\n      if (key.indexOf('_GR') > -1) {\n        const gr = key.split('_GR')[1]\n        if (gr) {\n          const arr = temp.get(gr) ? temp.get(gr) : []\n          arr.push(b)\n          temp.set(gr, arr)\n        }\n      } else {\n        temp.set(key, [b])\n        // temp[key] = b\n      }\n    }\n\n    const res = []\n    Array.from(temp).forEach(v => res.push(v[1]))\n    return res\n\n  }\n}\n"]}