{"version":3,"sources":["index.ts"],"names":["whMiddleware","useWebhooks","whPath","bot","onServerReady","bp","router","http","createRouterForBot","checkAuthentication","enableJsonBodyParser","getPublicPath","use","req","res","next","botId","params","status","send","message","onServerStarted","config","getModuleConfig","forceWebhook","process","CLUSTER_ENABLED","Bot","onBotMount","getModuleConfigForBot","enabled","_bot","init","telegram","setWebhook","replace","webhookCallback","deleteWebhook","startPolling","setupBot","onBotUnmount","removeBot","catch","er","console","error","onModuleUnmount","events","removeMiddleware","entryPoint","definition","name","menuIcon","fullName","homepage","noInterface","plugins"],"mappings":"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","sourceRoot":"/home/taraa62/svn/botpress12_1_0/modules/channel-telegram-t62/src/backend","sourcesContent":["import 'bluebird-global'\nimport * as sdk from 'botpress/sdk'\n\n\nimport { Config } from '../config'\nimport { Bot } from './Bot'\n\n\nconst whMiddleware: any = {}\nlet useWebhooks: boolean = true\nlet whPath = ''\nlet bot: Bot\n\nconst onServerReady = async (bp: typeof sdk) => {\n\n  if (useWebhooks) {\n    const router = bp.http.createRouterForBot('channel-telegram-t62', {\n      checkAuthentication: false,\n      enableJsonBodyParser: false // telegraf webhook has its custom body parser\n    })\n\n    whPath = (await router.getPublicPath()) + '/webhook'\n\n    router.use('/webhook', (req, res, next) => {\n      const { botId } = req.params\n      if (typeof whMiddleware[botId] === 'function') {\n        whMiddleware[botId](req, res, next)\n      } else {\n        res.status(404).send({ message: `Bot \"${botId}\" not a Telegram bot` })\n      }\n    })\n  }\n}\n\nconst onServerStarted = async (bp: typeof sdk) => {\n  const config = (await bp.config.getModuleConfig('channel-telegram-t62')) as Config\n  useWebhooks = config.forceWebhook || process.CLUSTER_ENABLED\n\n  if (!bot) bot = new Bot(bp)\n}\n\nconst onBotMount = async (bp: typeof sdk, botId: string) => {\n  const config = (await bp.config.getModuleConfigForBot('channel-telegram-t62', botId)) as Config\n\n  if (config.enabled) {\n    const _bot = await bot.init(config, botId)\n    if (useWebhooks) {\n      await _bot.telegram.setWebhook(whPath.replace('BOT_ID', botId))\n      whMiddleware[botId] = _bot.webhookCallback('/')\n    } else {\n      await _bot.telegram.deleteWebhook()\n      _bot.startPolling()\n    }\n    await bot.setupBot(botId)\n  }\n}\n\nconst onBotUnmount = async (bp: typeof sdk, botId: string) => {\n  await bot.removeBot(botId).catch(er => console.error(er))\n  delete whMiddleware[botId]\n}\n\nconst onModuleUnmount = async (bp: typeof sdk) => {\n  bp.events.removeMiddleware('telegram.sendMessages')\n}\n\nconst entryPoint: sdk.ModuleEntryPoint = {\n  onServerStarted,\n  onServerReady,\n  onBotMount,\n  onBotUnmount,\n  onModuleUnmount,\n  definition: {\n    name: 'channel-telegram-t62',\n    menuIcon: 'none', // no interface = true\n    fullName: 'Telegram',\n    homepage: 'https://botpress.io',\n    noInterface: true,\n    plugins: []\n  }\n}\n\nexport default entryPoint\n"]}