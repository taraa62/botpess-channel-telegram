{"version":3,"sources":["ClientReceive.ts"],"names":["ClientReceive","constructor","bp","sendEvent","receive","type","ClientEvent","CALLBACK_QUERY","ctx","callbackQuery","_sendEvent","text","from","chat","data","message","botId","preview","threadId","_","get","target","events","IO","Event","channel","direction","payload","toString"],"mappings":";;;;;;;AACA;;AACA;;;;AAEO,MAAMA,aAAN,CAAoB;AAEzBC,EAAAA,WAAW,CAASC,EAAT,EAAyB;AAAA;AAEnC;;AAEMC,EAAAA,SAAP,CAAiBC,OAAjB,EAA6C;AAC3C,YAAQA,OAAO,CAACC,IAAhB;AACE,WAAKC,qBAAYC,cAAjB;AACE,YAAIH,OAAO,CAACI,GAAR,CAAYC,aAAhB,EAA+B;AAC7BL,UAAAA,OAAO,CAACC,IAAR,GAAe,aAAf;;AACA,eAAKK,UAAL,CAAgBN,OAAhB,EAAyB;AACvBO,YAAAA,IAAI,EAAE,UADiB;AAEvBF,YAAAA,aAAa,EAAEL,OAAO,CAACI,GAAR,CAAYC,aAFJ;AAEmB,eAAGL,OAAO,CAACI,GAAR,CAAYI,IAFlC;AAEwC,eAAGR,OAAO,CAACI,GAAR,CAAYK;AAFvD,WAAzB,EAGGT,OAAO,CAACI,GAAR,CAAYC,aAAZ,CAA0BK,IAH7B;;AAIA;AACD;;AAEH;AACE,YAAIV,OAAO,CAACI,GAAR,CAAYO,OAAZ,IAAuBX,OAAO,CAACI,GAAR,CAAYO,OAAZ,CAAoBJ,IAA/C,EAAqD;AACnD,eAAKD,UAAL,CAAgBN,OAAhB,EAAyB,EACvB,GAAGA,OAAO,CAACI,GAAR,CAAYI,IADQ;AACF,eAAGR,OAAO,CAACI,GAAR,CAAYK,IADb;AAEvB;AACAF,YAAAA,IAAI,EAAEP,OAAO,CAACI,GAAR,CAAYO,OAAZ,CAAoBJ;AAHH,WAAzB,EAIGP,OAAO,CAACI,GAAR,CAAYO,OAAZ,CAAoBJ,IAJvB;AAKD;;AACD;AAnBJ;AAqBD;;AAEOD,EAAAA,UAAR,CAAmB;AAAEF,IAAAA,GAAF;AAAOH,IAAAA,IAAP;AAAaW,IAAAA;AAAb,GAAnB,EAAsDD,OAAtD,EAAoEE,OAAe,GAAG,EAAtF,EAAgG;AAC9F,UAAMC,QAAQ,GAAGC,gBAAEC,GAAF,CAAMZ,GAAN,EAAW,SAAX,KAAyBW,gBAAEC,GAAF,CAAMZ,GAAN,EAAW,iBAAX,CAA1C;;AACA,UAAMa,MAAM,GAAGF,gBAAEC,GAAF,CAAMZ,GAAN,EAAW,SAAX,KAAyBW,gBAAEC,GAAF,CAAMZ,GAAN,EAAW,iBAAX,CAAxC;;AAEA,SAAKN,EAAL,CAAQoB,MAAR,CAAenB,SAAf,CACE,KAAKD,EAAL,CAAQqB,EAAR,CAAWC,KAAX,CAAiB;AACfR,MAAAA,KAAK,EAAEA,KADQ;AAEfS,MAAAA,OAAO,EAAE,UAFM;AAGfC,MAAAA,SAAS,EAAE,UAHI;AAIfC,MAAAA,OAAO,EAAEnB,GAAG,CAACO,OAAJ,GAAcP,GAAG,CAACO,OAAlB,GAA4BA,OAJtB;AAKfE,MAAAA,OAAO,EAAEA,OALM;AAMfC,MAAAA,QAAQ,EAAEA,QAAQ,IAAIA,QAAQ,CAACU,QAAT,EANP;AAOfP,MAAAA,MAAM,EAAEA,MAAM,IAAIA,MAAM,CAACO,QAAP,EAPH;AAQfvB,MAAAA,IAAI,EAAEA;AARS,KAAjB,CADF;AAYD;;AA9CwB","sourceRoot":"/home/taraa62/svn/botpress12_1_0/modules/channel-telegram-t62/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\nimport { ClientEvent, ReceiveMess } from './typings'\n\nexport class ClientReceive {\n\n  constructor(private bp: typeof sdk) {\n\n  }\n\n  public sendEvent(receive: ReceiveMess): void {\n    switch (receive.type) {\n      case ClientEvent.CALLBACK_QUERY:\n        if (receive.ctx.callbackQuery) {\n          receive.type = 't62callback'\n          this._sendEvent(receive, {\n            text: 'callback',\n            callbackQuery: receive.ctx.callbackQuery, ...receive.ctx.from, ...receive.ctx.chat\n          }, receive.ctx.callbackQuery.data)\n          break\n        }\n\n      default:\n        if (receive.ctx.message && receive.ctx.message.text) {\n          this._sendEvent(receive, {\n            ...receive.ctx.from, ...receive.ctx.chat,\n            //message: receive.ctx.message,\n            text: receive.ctx.message.text\n          }, receive.ctx.message.text)\n        }\n        break\n    }\n  }\n\n  private _sendEvent({ ctx, type, botId }: ReceiveMess, message: any, preview: string = ''): void {\n    const threadId = _.get(ctx, 'chat.id') || _.get(ctx, 'message.chat.id')\n    const target = _.get(ctx, 'from.id') || _.get(ctx, 'message.from.id')\n\n    this.bp.events.sendEvent(\n      this.bp.IO.Event({\n        botId: botId,\n        channel: 'telegram',\n        direction: 'incoming',\n        payload: ctx.message ? ctx.message : message,\n        preview: preview,\n        threadId: threadId && threadId.toString(),\n        target: target && target.toString(),\n        type: type\n      })\n    )\n  }\n\n}\n"]}