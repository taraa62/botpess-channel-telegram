{"version":3,"sources":["ReplyDefMethods.ts"],"names":["ReplyDefMethods","constructor","send_typing","event","client","chatId","typing","parseTyping","payload","value","telegram","sendChatAction","Promise","delay","send_text","keyboard","Markup","keyboardButtons","quick_replies","markdown","sendMessage","preview","Extra","markup","one_time_keyboard","catch","send_image","url","toLowerCase","endsWith","sendAnimation","sendPhoto","send_carousel","elements","length","title","picture","subtitle","buttons","map","x","filename","path","basename","inlineKeyboard","arr","undefined","rows","row","urlButton","callbackButton","isNaN","Math","max"],"mappings":"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","sourceRoot":"/home/taras/Документы/svn/botpress_12.1.0/modules/channel-telegram-t62/src/backend","sourcesContent":["import * as sdk from \"botpress/sdk\"\nimport path from \"path\"\nimport Telegraf, { Button, CallbackButton, ContextMessageUpdate, Extra, Markup } from 'telegraf'\n\nexport class ReplyDefMethods {\n  constructor(){\n\n  }\n\n  public async send_typing(event: sdk.IO.Event, client: Telegraf<ContextMessageUpdate>, chatId: string) {\n    const typing = this.parseTyping(event.payload.value)\n    await client.telegram.sendChatAction(chatId, 'typing')\n    await Promise.delay(typing)\n\n  }\n\n  public async send_text(event: sdk.IO.Event, client: Telegraf<ContextMessageUpdate>, chatId: string) {\n    const keyboard = Markup.keyboard(this.keyboardButtons<Button>(event.payload.quick_replies))\n    if (event.payload.markdown != false) {\n      // Attempt at sending with markdown first, fallback to regular text on failure\n      await client.telegram\n        .sendMessage(chatId, event.preview, Extra.markdown(true).markup({ ...keyboard, one_time_keyboard: true }))\n        .catch(() =>\n          client.telegram.sendMessage(\n            chatId,\n            event.preview,\n            Extra.markdown(false).markup({ ...keyboard, one_time_keyboard: true })\n          )\n        )\n    } else {\n      await client.telegram.sendMessage(\n        chatId,\n        event.preview,\n        Extra.markdown(false).markup({ ...keyboard, one_time_keyboard: true })\n      )\n    }\n  }\n\n  public async  send_image(event: sdk.IO.Event, client: Telegraf<ContextMessageUpdate>, chatId: string) {\n    const keyboard = Markup.keyboard(this.keyboardButtons<Button>(event.payload.quick_replies))\n    if (event.payload.url.toLowerCase().endsWith('.gif')) {\n      await client.telegram.sendAnimation(\n        chatId,\n        event.payload.url,\n        Extra.markdown(false).markup({ ...keyboard, one_time_keyboard: true })\n      )\n    } else {\n      await client.telegram.sendPhoto(\n        chatId,\n        event.payload.url,\n        Extra.markdown(false).markup({ ...keyboard, one_time_keyboard: true })\n      )\n    }\n  }\n\n  public async send_carousel(event: sdk.IO.Event, client: Telegraf<ContextMessageUpdate>, chatId: string) {\n    if (event.payload.elements && event.payload.elements.length) {\n      const { title, picture, subtitle } = event.payload.elements[0]\n      const buttons = event.payload.elements.map(x => x.buttons)\n      if (picture) {\n        await client.telegram.sendChatAction(chatId, 'upload_photo')\n        await client.telegram.sendPhoto(chatId, { url: picture, filename: path.basename(picture) })\n      }\n      const keyboard = this.keyboardButtons<CallbackButton>(buttons)\n      await client.telegram.sendMessage(\n        chatId,\n        `*${title}*\\n${subtitle}`,\n        Extra.markdown(true).markup(Markup.inlineKeyboard(keyboard))\n      )\n    }\n  }\n\n\n  private keyboardButtons<T>(arr: any[] | undefined): T[] | undefined {\n    if (!arr || !arr.length) {\n      return undefined\n    }\n\n    const rows = arr[0].length ? arr : [arr]\n\n    return rows.map(\n      row =>\n        row.map(x => {\n          if (x.url) {\n            return Markup.urlButton(x.title, x.url)\n          }\n\n          return Markup.callbackButton(x.title, x.payload)\n        }) as any\n    )\n  }\n\n  private parseTyping(typing): number {\n    if (isNaN(typing)) {\n      return 1000\n    }\n    return Math.max(typing, 500)\n  }\n}\n"]}